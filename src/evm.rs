use huff_utils::Opcode;

// Source: https://github.com/huff-language/huff-rs/blob/main/huff_utils/src/evm.rs
impl Opcode {
    /// Translates an Opcode into a string
    pub fn string(&self) -> String {
        let opcode_str = match self {
            Opcode::Stop => "00",
            Opcode::Add => "01",
            Opcode::Mul => "02",
            Opcode::Sub => "03",
            Opcode::Div => "04",
            Opcode::Sdiv => "05",
            Opcode::Mod => "06",
            Opcode::Smod => "07",
            Opcode::Addmod => "08",
            Opcode::Mulmod => "09",
            Opcode::Exp => "0a",
            Opcode::Signextend => "0b",
            Opcode::Lt => "10",
            Opcode::Gt => "11",
            Opcode::Slt => "12",
            Opcode::Sgt => "13",
            Opcode::Eq => "14",
            Opcode::Iszero => "15",
            Opcode::And => "16",
            Opcode::Or => "17",
            Opcode::Xor => "18",
            Opcode::Not => "19",
            Opcode::Byte => "1a",
            Opcode::Shl => "1b",
            Opcode::Shr => "1c",
            Opcode::Sar => "1d",
            Opcode::Sha3 => "20",
            Opcode::Address => "30",
            Opcode::Balance => "31",
            Opcode::Origin => "32",
            Opcode::Caller => "33",
            Opcode::Callvalue => "34",
            Opcode::Calldataload => "35",
            Opcode::Calldatasize => "36",
            Opcode::Calldatacopy => "37",
            Opcode::Codesize => "38",
            Opcode::Codecopy => "39",
            Opcode::Gasprice => "3a",
            Opcode::Extcodesize => "3b",
            Opcode::Extcodecopy => "3c",
            Opcode::Returndatasize => "3d",
            Opcode::Returndatacopy => "3e",
            Opcode::Extcodehash => "3f",
            Opcode::Blockhash => "40",
            Opcode::Coinbase => "41",
            Opcode::Timestamp => "42",
            Opcode::Number => "43",
            Opcode::Difficulty => "44",
            Opcode::Prevrandao => "44",
            Opcode::Gaslimit => "45",
            Opcode::Chainid => "46",
            Opcode::Selfbalance => "47",
            Opcode::Basefee => "48",
            Opcode::Pop => "50",
            Opcode::Mload => "51",
            Opcode::Mstore => "52",
            Opcode::Mstore8 => "53",
            Opcode::Sload => "54",
            Opcode::Sstore => "55",
            Opcode::Jump => "56",
            Opcode::Jumpi => "57",
            Opcode::Pc => "58",
            Opcode::Msize => "59",
            Opcode::Gas => "5a",
            Opcode::Jumpdest => "5b",
            Opcode::Push1 => "60",
            Opcode::Push2 => "61",
            Opcode::Push3 => "62",
            Opcode::Push4 => "63",
            Opcode::Push5 => "64",
            Opcode::Push6 => "65",
            Opcode::Push7 => "66",
            Opcode::Push8 => "67",
            Opcode::Push9 => "68",
            Opcode::Push10 => "69",
            Opcode::Push11 => "6a",
            Opcode::Push12 => "6b",
            Opcode::Push13 => "6c",
            Opcode::Push14 => "6d",
            Opcode::Push15 => "6e",
            Opcode::Push16 => "6f",
            Opcode::Push17 => "70",
            Opcode::Push18 => "71",
            Opcode::Push19 => "72",
            Opcode::Push20 => "73",
            Opcode::Push21 => "74",
            Opcode::Push22 => "75",
            Opcode::Push23 => "76",
            Opcode::Push24 => "77",
            Opcode::Push25 => "78",
            Opcode::Push26 => "79",
            Opcode::Push27 => "7a",
            Opcode::Push28 => "7b",
            Opcode::Push29 => "7c",
            Opcode::Push30 => "7d",
            Opcode::Push31 => "7e",
            Opcode::Push32 => "7f",
            Opcode::Dup1 => "80",
            Opcode::Dup2 => "81",
            Opcode::Dup3 => "82",
            Opcode::Dup4 => "83",
            Opcode::Dup5 => "84",
            Opcode::Dup6 => "85",
            Opcode::Dup7 => "86",
            Opcode::Dup8 => "87",
            Opcode::Dup9 => "88",
            Opcode::Dup10 => "89",
            Opcode::Dup11 => "8a",
            Opcode::Dup12 => "8b",
            Opcode::Dup13 => "8c",
            Opcode::Dup14 => "8d",
            Opcode::Dup15 => "8e",
            Opcode::Dup16 => "8f",
            Opcode::Swap1 => "90",
            Opcode::Swap2 => "91",
            Opcode::Swap3 => "92",
            Opcode::Swap4 => "93",
            Opcode::Swap5 => "94",
            Opcode::Swap6 => "95",
            Opcode::Swap7 => "96",
            Opcode::Swap8 => "97",
            Opcode::Swap9 => "98",
            Opcode::Swap10 => "99",
            Opcode::Swap11 => "9a",
            Opcode::Swap12 => "9b",
            Opcode::Swap13 => "9c",
            Opcode::Swap14 => "9d",
            Opcode::Swap15 => "9e",
            Opcode::Swap16 => "9f",
            Opcode::Log0 => "a0",
            Opcode::Log1 => "a1",
            Opcode::Log2 => "a2",
            Opcode::Log3 => "a3",
            Opcode::Log4 => "a4",
            Opcode::Create => "f0",
            Opcode::Call => "f1",
            Opcode::Callcode => "f2",
            Opcode::Return => "f3",
            Opcode::Delegatecall => "f4",
            Opcode::Create2 => "f5",
            Opcode::Staticcall => "fa",
            Opcode::Revert => "fd",
            Opcode::Invalid => "fe",
            Opcode::Selfdestruct => "ff",
        };
        opcode_str.to_string()
    }

    /// Translates a hex string into an Opcode
    pub fn new(string: &String) -> self {
        let opcode = match string {
            "00" => Opcode::Stop,
            "01" => Opcode::Add,
            "02" => Opcode::Mul,
            "03" => Opcode::Sub,
            "04" => Opcode::Div,
            "05" => Opcode::Sdiv,
            "06" => Opcode::Mod,
            "07" => Opcode::Smod,
            "08" => Opcode::Addmod,
            "09" => Opcode::Mulmod,
            "0a" => Opcode::Exp,
            "0b" => Opcode::Signextend,
            "10" => Opcode::Lt,
            "11" => Opcode::Gt,
            "12" => Opcode::Slt,
            "13" => Opcode::Sgt,
            "14" => Opcode::Eq,
            "15" => Opcode::Iszero,
            "16" => Opcode::And,
            "17" => Opcode::Or,
            "18" => Opcode::Xor,
            "19" => Opcode::Not,
            "1a" => Opcode::Byte,
            "1b" => Opcode::Shl,
            "1c" => Opcode::Shr,
            "1d" => Opcode::Sar,
            "20" => Opcode::Sha3,
            "30" => Opcode::Address,
            "31" => Opcode::Balance,
            "32" => Opcode::Origin,
            "33" => Opcode::Caller,
            "34" => Opcode::Callvalue,
            "35" => Opcode::Calldataload,
            "36" => Opcode::Calldatasize,
            "37" => Opcode::Calldatacopy,
            "38" => Opcode::Codesize,
            "39" => Opcode::Codecopy,
            "3a" => Opcode::Gasprice,
            "3b" => Opcode::Extcodesize,
            "3c" => Opcode::Extcodecopy,
            "3d" => Opcode::Returndatasize,
            "3e" => Opcode::Returndatacopy,
            "3f" => Opcode::Extcodehash,
            "40" => Opcode::Blockhash,
            "41" => Opcode::Coinbase,
            "42" => Opcode::Timestamp,
            "43" => Opcode::Number,
            "44" => Opcode::Difficulty,
            "44" => Opcode::Prevrandao,
            "45" => Opcode::Gaslimit,
            "46" => Opcode::Chainid,
            "47" => Opcode::Selfbalance,
            "48" => Opcode::Basefee,
            "50" => Opcode::Pop,
            "51" => Opcode::Mload,
            "52" => Opcode::Mstore,
            "53" => Opcode::Mstore8,
            "54" => Opcode::Sload,
            "55" => Opcode::Sstore,
            "56" => Opcode::Jump,
            "57" => Opcode::Jumpi,
            "58" => Opcode::Pc,
            "59" => Opcode::Msize,
            "5a" => Opcode::Gas,
            "5b" => Opcode::Jumpdest,
            "60" => Opcode::Push1,
            "61" => Opcode::Push2,
            "62" => Opcode::Push3,
            "63" => Opcode::Push4,
            "64" => Opcode::Push5,
            "65" => Opcode::Push6,
            "66" => Opcode::Push7,
            "67" => Opcode::Push8,
            "68" => Opcode::Push9,
            "69" => Opcode::Push10,
            "6a" => Opcode::Push11,
            "6b" => Opcode::Push12,
            "6c" => Opcode::Push13,
            "6d" => Opcode::Push14,
            "6e" => Opcode::Push15,
            "6f" => Opcode::Push16,
            "70" => Opcode::Push17,
            "71" => Opcode::Push18,
            "72" => Opcode::Push19,
            "73" => Opcode::Push20,
            "74" => Opcode::Push21,
            "75" => Opcode::Push22,
            "76" => Opcode::Push23,
            "77" => Opcode::Push24,
            "78" => Opcode::Push25,
            "79" => Opcode::Push26,
            "7a" => Opcode::Push27,
            "7b" => Opcode::Push28,
            "7c" => Opcode::Push29,
            "7d" => Opcode::Push30,
            "7e" => Opcode::Push31,
            "7f" => Opcode::Push32,
            "80" => Opcode::Dup1,
            "81" => Opcode::Dup2,
            "82" => Opcode::Dup3,
            "83" => Opcode::Dup4,
            "84" => Opcode::Dup5,
            "85" => Opcode::Dup6,
            "86" => Opcode::Dup7,
            "87" => Opcode::Dup8,
            "88" => Opcode::Dup9,
            "89" => Opcode::Dup10,
            "8a" => Opcode::Dup11,
            "8b" => Opcode::Dup12,
            "8c" => Opcode::Dup13,
            "8d" => Opcode::Dup14,
            "8e" => Opcode::Dup15,
            "8f" => Opcode::Dup16,
            "90" => Opcode::Swap1,
            "91" => Opcode::Swap2,
            "92" => Opcode::Swap3,
            "93" => Opcode::Swap4,
            "94" => Opcode::Swap5,
            "95" => Opcode::Swap6,
            "96" => Opcode::Swap7,
            "97" => Opcode::Swap8,
            "98" => Opcode::Swap9,
            "99" => Opcode::Swap10,
            "9a" => Opcode::Swap11,
            "9b" => Opcode::Swap12,
            "9c" => Opcode::Swap13,
            "9d" => Opcode::Swap14,
            "9e" => Opcode::Swap15,
            "9f" => Opcode::Swap16,
            "a0" => Opcode::Log0,
            "a1" => Opcode::Log1,
            "a2" => Opcode::Log2,
            "a3" => Opcode::Log3,
            "a4" => Opcode::Log4,
            "f0" => Opcode::Create,
            "f1" => Opcode::Call,
            "f2" => Opcode::Callcode,
            "f3" => Opcode::Return,
            "f4" => Opcode::Delegatecall,
            "f5" => Opcode::Create2,
            "fa" => Opcode::Staticcall,
            "fd" => Opcode::Revert,
            "fe" => Opcode::Invalid,
            "ff" => Opcode::Selfdestruct,
        };
    }
}

impl fmt::Display for Opcode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let opcode_str = self.string();
        write!(f, "{}", opcode_str)
    }
}

impl From<Opcode> for String {
    fn from(o: Opcode) -> Self {
        o.string()
    }
}